academic students status =
0 => Inactive
1 => Active
2 => TC Student
3 => Regular completed


for receivable fee from students details

function(){
    $currentDate = now()->toDateString();
    $receivableReport = DB::table('fee_collections')
        ->select(
            'fee_collections.id as fee_collection_id',
            'students.std_id',
            'students.std_name',
            'fee_collections.payable_amount',
            DB::raw('COALESCE(SUM(fee_payments.amount_paid), 0) as total_amount_paid'),
            'fee_collections.due_date',
            'fee_collections.fee_description'
        )
        ->join('students', 'fee_collections.std_id', '=', 'students.std_id')
        ->leftJoin('fee_payments', 'fee_collections.id', '=', 'fee_payments.fee_collection_id')
        ->where(function ($query) {
            $query->where('fee_collections.is_paid', 0) // Unpaid fees
                ->orWhere('fee_payments.amount_paid', '<', 'fee_collections.payable_amount'); // Partially paid fees
        })
        ->where('fee_collections.due_date', '>', $currentDate) // Future due date
        ->groupBy('fee_collections.id', 'students.std_id', 'students.std_name', 'fee_collections.payable_amount', 'fee_collections.due_date', 'fee_collections.fee_description');

    // Display the generated SQL query
    dd($receivableReport->toSql());

    // Execute the query and display the result
    dd($receivableReport->get());

}


Total due student wise
function(){
    $dueAmountByStudent = DB::table('students')
    ->select(
        'students.std_id',
        'students.std_name',
        DB::raw('SUM(fee_collections.payable_amount) - COALESCE(SUM(fp.total_amount_paid), 0) as total_due_amount')
    )
    ->leftJoin('fee_collections', 'students.std_id', '=', 'fee_collections.std_id')
    ->leftJoin(DB::raw('(SELECT fee_collection_id, SUM(amount_paid) as total_amount_paid FROM fee_payments GROUP BY fee_collection_id) as fp'), 'fee_collections.id', '=', 'fp.fee_collection_id')
    ->where('fee_collections.is_paid', 0) // Unpaid fees
    ->where('fee_collections.due_date', '>', $currentDate) // Future due date
    ->groupBy('students.std_id', 'students.std_name')
    ->having('total_due_amount', '>', 0); // Filter out students with no due amount

    // Display the generated SQL query
    dd($dueAmountByStudent->toSql());

    // Execute the query and display the result
    dd($dueAmountByStudent->get());

}


as per today dues or bill
fuction getdues(){
    public function test()
    {
        $currentDate = now();
        $totalDuesByStudent = DB::table('students')
        ->select(
            'students.std_id',
            'students.std_name',
            'fee_collections.payable_amount',
            'fp.total_amount_paid',
            DB::raw('SUM(COALESCE(fee_collections.payable_amount, 0) - COALESCE(fp.total_amount_paid, 0)) as total_due_amount')
        )
        ->leftJoin('fee_collections', function ($join) use ($currentDate) {
            $join->on('students.std_id', '=', 'fee_collections.std_id')
                ->where('fee_collections.is_paid', 0) // Unpaid fees
                ->whereDate('fee_collections.due_date', '>=', $currentDate->format('Y-m-d')); // Due date on or before the current date
        })
        ->leftJoin(DB::raw('(SELECT fee_collection_id, SUM(amount_paid) as total_amount_paid FROM fee_payments GROUP BY fee_collection_id) as fp'), 'fee_collections.id', '=', 'fp.fee_collection_id')
        ->groupBy('students.std_id', 'students.std_name', 'fee_collections.payable_amount', 'fp.total_amount_paid')
        ->get();


        dd($totalDuesByStudent);
    }
}


specific month wise,

public function getDuebyStdasToday($std_id)
    {
        $currentDate = Carbon::parse('2024-02-15');
        $targetMonth = $currentDate->month;
        $targetYear = $currentDate->year;

        // Get the last date of the month
        $lastDateOfMonth = $currentDate->endOfMonth()->format('Y-m-d');

        $totalDuesByStudent = DB::table('students')
            ->select(
                'students.std_id',
                'students.std_name',
                'fee_collections.*',
                'fp.total_amount_paid',
                DB::raw('SUM(COALESCE(fee_collections.payable_amount, 0) - COALESCE(fp.total_amount_paid, 0)) as total_due_amount')
            )
            ->leftJoin('fee_collections', function ($join) use ($targetMonth, $targetYear, $lastDateOfMonth) {
                $join->on('students.std_id', '=', 'fee_collections.std_id')
                    ->where('fee_collections.is_paid', 0) // Unpaid fees
                    ->whereMonth('fee_collections.due_date', '=', $targetMonth)
                    ->whereYear('fee_collections.due_date', '=', $targetYear)
                    ->where('fee_collections.due_date', '<=', $lastDateOfMonth); // Filter by due date less than or equal to the last date of the month
            })
            ->leftJoin(DB::raw('(SELECT fee_collection_id, SUM(amount_paid) as total_amount_paid FROM fee_payments GROUP BY fee_collection_id) as fp'), 'fee_collections.id', '=', 'fp.fee_collection_id')
            ->where('fee_collections.std_id', $std_id)
            ->groupBy('fee_collections.id', 'fee_collections.due_date', 'fee_collections.payable_amount', 'fee_collections.fee_description', 'students.std_id', 'students.std_name')
            ->orderBy('fee_collections.id', 'ASC')
            ->get();

        return $totalDuesByStudent;
    }
